[{"title":"Java线程池","url":"/2023/04/23/Java线程池/","content":"\n参考文档：[Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)](https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html)\n\n# 线程池的好处\n\n1.降低资源消耗\n\n2.提高响应速度\n\n3.提高线程的可管理性：线程无限创建而带来的不合理分布的问题导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。\n\n4.提供更多更强大的功能：线程池有可扩展性，允许开发人员向其中增加更多的功能。\n\n# 线程池解决的问题\n\n解决的核心问题：资源管理问题。\n\n# 线程池核心设计与实现\n\nJava中使用的是ThreadPoolExecutor类\n\n## 总体设计\n\n基于JDK 1.8源码分析。下面是ThradPoolExecutor的UML类图。\n\n![](https://s1.vika.cn/space/2023/04/26/23f4fc76bc2c41e789b31cbc756b42ac)\n\nExecutor接口（顶层）:将任务提交和任务执行进行解耦。用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。\n\nExecutorService接口:（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法。（2）提供管理线程池的方法，如停止线程池的运行。AbstractExecutorService是上层的抽象类，将执行任务的流程串流，保证下层的实现只需要关注一个执行任务的方法。实现类ThreadPoolExecutor实现最复杂的运行部分，一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。\n\nThreadPoolExecutor运行机制：\n\n![](https://s1.vika.cn/space/2023/04/26/40efd922bc9e4a359212f828e2164343)\n\n线程池运行分为两部分：任务管理（生产者）、线程管理（消费者）。\n\n任务管理：任务提交后，线程池会判断该任务后续的流转：1.直接申请线程执行任务2.缓冲到队列中等待线程执行3.拒绝该任务。\n\n线程管理：被统一维护在线程池内，根据任务请求进行线程分配，当线程执行完成后会继续获取新的任务去执行，最终当线程获取不了任务时被回收。\n\n## 生命周期管理\n\n线程池的运行状态是由内部来维护。线程池内用1个变量维护两个值：运行状态(runState)和线程数量(workerCount)。在具体实现中，这两个关键参数的维护放在一起：\n\n~~~java\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n~~~\n\nctl是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段。高3位保存runState，低29位保存workerCount，两变量互不干扰，可避免出现不一致的情况，节省锁资源。\n\n获取生命周期状态、获取线程池线程数量方法：\n\n~~~java\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; } //计算当前运行状态\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }  //计算当前线程数量\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }   //通过状态和线程数生成ctl\n~~~\n\nThreadPoolExecutor的5种运行状态：\n\n![img](https://s1.vika.cn/space/2023/04/27/97c3b7ed420148e58bd0d9b43ff12240)\n\n其生命周期转换如下所示：\n\n![图3 线程池生命周期](https://s1.vika.cn/space/2023/04/27/f1cca7f4da5448b58dd9889998a9bb9a)\n\n## 任务执行机制\n\n### 任务调度\n\n任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务如何执行是由这个阶段决定的。\n\n首先，所有任务调度是由execute方法完成，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程。执行过程如下：\n\n![图4 任务调度流程](https://s1.vika.cn/space/2023/04/27/d6171d2754524b35ba7f56937efef4b0)\n\n其中，线程数为workerCount，核心（线程）数为corePoolSize，最大线程数为maximumPoolSize。\n\n### 任务缓冲\n\n任务缓冲模块是线程池能够管理任务的核心部分。通过阻塞队列实现任务和线程两者的解耦。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。\n\n线程队列(BlockingQueue)是支持两个附加操作的队列：在队列为空时，获取元素的线程会等待队列变为非空；当队列满时，储存元素的线程会等待队列可用。生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。\n\n下面线程1往阻塞队列中添加元素，线程2从阻塞队列中语出元素：\n\n![图5 阻塞队列](https://s1.vika.cn/space/2023/04/29/d88959afc97843448eaf7db149b4dcf0)\n\n下面是阻塞队列的成员：\n\n![img](https://s1.vika.cn/space/2023/04/29/0fbd6ba386664b1bbc5d0d277e3936f6)\n\n### 任务申请\n\n从队列中获取任务的流程(getTask)：\n\n![图6 获取任务流程图](https://s1.vika.cn/space/2023/04/29/16fd943d6f814d36aee30d7d6856b90f)\n\n工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。\n\n### 任务拒绝\n\n当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时拒绝任务。\n\n拒绝策略是预购接口\n\n~~~java\npublic interface RejectedExecutionHandler {\n    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}\n~~~\n\n用户可以通过实现该接口定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：\n\n![img](https://s1.vika.cn/space/2023/04/29/18c4b971010b462e971350a32079a55b)\n\n## Worker线程管理\n\n### Worker线程\n\n线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。\n\n~~~java\nprivate final class Worker extends AbstractQueuedSynchronizer implements Runnable{\n    final Thread thread;//Worker持有的线程\n    Runnable firstTask;//初始化的任务，可以为null\n}\n~~~\n\nWorker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。\n\n![图7 Worker执行任务](https://s1.vika.cn/space/2023/04/29/06d766729f124844903012cd6adfa036)\n\n线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。\n\nWorker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。\n\n1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。\n\n![图8 线程池回收过程](https://s1.vika.cn/space/2023/04/29/814ef7e051bb4e4cacd331448295f104)\n\n### Worker线程增加\n\n通过线程池中addWorker()方法增加。该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。\n\naddWorker两个参数：firstTask用于指定新增的线程执行的第一个任务，可为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize。\n\n![图9 申请线程执行流程图](https://s1.vika.cn/space/2023/04/29/59e72d334af1457cb534ea32ce74f04d)\n\n### Worker线程回收\n\n线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。\n\n~~~java\ntry {\n  while (task != null || (task = getTask()) != null) {\n    //执行任务\n  }\n} finally {\n  processWorkerExit(w, completedAbruptly);//获取不到任务时，主动回收自己\n}\n~~~\n\n线程回收的工作是在processWorkerExit方法完成的。\n\n![图10 线程销毁流程](https://s1.vika.cn/space/2023/04/29/4a8cec0781f4460799d63310e0472d18)\n\n**Worker线程执行任务**\n\n在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：\n\n1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。\n\n![图11 执行任务流程](https://s1.vika.cn/space/2023/04/29/cec6a5674b12476593003b3a496ac2ad)","tags":["线程池"]},{"title":"口琴曲（长期更新）","url":"/2023/04/22/口琴曲（长期更新）/","content":"\n本文选择我比较喜欢的游戏口琴曲的简谱（只有数字）。\n\n# BB's theme\n\n~~~\n2 1 5 3\n\n2 2 3 4 1\n\n2 1 5 3\n\n3 4 5 6 1\n~~~\n\n# Faster than light\n\n~~~\n6 +2 +1 3\n\n2 +2 +1 4 5\n\n6 #6 6 6\n\n4 +2 +1 5\n\n6 +2 +1 3\n\n2 +2 +1 4 5\n\n6 #6 6 6\n\n6 5 4 4 3\n\n\n\n6 +2 +1 3\n\n2 +2 +1 4 5\n\n6 +4 +3 5\n\n4 +2 +1 5\n~~~\n\n# Metal Gear Solid main theme\n\n~~~\n3 2 1 1 2 3 -6 3 2\n\n1 2 3 6 5 3 1 2\n\n3 6 +1 7 +1 +2 +1 6\n\n5 6 7 +1 7 6 5 6\n\n转成D调了下面\n3 2 1 1 2 3 -6 3 2\n\n1 2 3 6 5 3 1 2\n\n3 6 +1 7 +1 +2 +1 6\n\n5 6 7 +1 7 6 5 6\n\n7 +1 2 3 5 6\n~~~\n\n# Ori and the blind forest main theme\n\n~~~\n+1 7 6 5 3 \n\n+1 7 6 7\n\n+1 7 6 5 3\n\n2 1 2 3\n\n+1 7 6 5 3\n\n+1 7 6 7 +1 +2 +3 +3 +3 +2 +5 +3 +1 +2 +1 7 6\n~~~\n\n# Will the circle be unbroken\n\n~~~\n-7 1 3 3\n\n6 4 3 6\n\n6 4 3_3 3 1 -7\n\n-7 1 3 3\n\n6 7 7 6\n\n3 4 6 6 4 4 3\n~~~\n\n# 灯火之星\n\n~~~\n234 24[1]7675\n\n#665 4565453\n\n234 24[1]767[2]\n\n#665 45654535【12】\n\n\n\n453 234565 453212\n\n453 234565312\n\n2345-6-\n\n453 234565 453212\n\n453 234565312 \n\n2345[1]6\n\n5555- 4#241\n\n6666 4211(#6)\n\n(#66#65)55\n\n2#1 #13 #6655-#4566-\n~~~\n\n# 动森主题曲\n\n~~~\n6 4 +2 +1 6 4 2 5\n\n4 5 6 +1 +3 +4 +1\n~~~\n\n# 货郎\n\n~~~\n4 1 2 3 2 1 -7 -7 2 4\n\n3 2 1 1 3 2 1 1\n\n3 5 7 5 4 6 4 2\n~~~\n\n# 力巴尔主题曲\n\n~~~\n1=C\n\n1 1(#6)(#5)(#6) (#2)\n\n(4) (4)(5)(#5)(#2) 11\n\n(#5)(5)(4) (5)1 4 #2#1#2 \n\n#2#11 (#6)(#5)(4)\n\n4 #2#64 #2 #1#5#2 #1 #1 (7) #4 【#1】【#2】 #6\n\n#6#5【#2】#6 #5#4【#1】#5\n\n#437 【#4】 【#5】【#2】\n\n【1】 【1】#6#5#6 #2\n\n4 45#5#2 11\n\n#554 5【1】 【4】 【#2】【#1】【#2】\n\n【#2】【#1】1 #6#54 4 #24\n~~~\n\n# 米法主题曲\n\n~~~\n3434343 32125343\n\n3434376 65675656\n\n\n\n3212536 65675656\n\n3434376 65675656\n~~~\n\n","tags":["生活"]},{"title":"Java多线程笔记","url":"/2023/04/12/Java多线程笔记/","content":"\n# 多线程意义\n\n在同一时间需要完成多项任务时需要多线程。\n\n参考视频：[看动画，学Java多线程教程](https://www.bilibili.com/video/BV1Z54y1j7JT)\n\n# 创建线程三种方式\n\n## 继承Thread类\n\n~~~java\npackage main;\n//自定义Thread类\npublic class MyThread extends Thread {\n    @Override\n    public void run(){\n        System.out.println(\"将执行任务写到run方法里\");\n    }\n}\n~~~\n\n~~~java\npackage main;\npublic class Main{\n    //创建MyThread实例\n    MyThread mythread = new MyThread();\n    //启动线程\n    myThread.start();\n}\n~~~\n\n## 实现Runnable接口\n\nRunnable没有启动线程的能力，需要搭配thread来用。\n\n~~~java\npackage main;\n//自定义任务\npublic class Task  implements Runnable {\n    @Override\n    public void run(){\n        System.out.println(\"将执行任务写到run方法里\");\n    }\n}\n~~~\n\n~~~java\npackage main;\npublic class Main {\n    public static void main(String[] args) {\n        //创建Task实例\n        Task task = new Task();\n        //创建线程\n        Thread thread = new Thread(task);\n        //启动线程\n        thread.start();\n    }\n}\n~~~\n\n## 实现Callable接口\n\nCallable没有启动线程的能力，需要搭配thread来用。同时，Callable需要返回泛型。\n\n~~~java\npackage main;\nimport java.util.concurrent.Callable;\n//自定义任务\npublic class Result implements Callable<String> {\n    @Override\n    public String call() throws Exception {\n        return \"将要执行的任务写在call方法里面并返回执行的结果\";\n    }\n}\n~~~\n\n~~~java\npackage main;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\npublic class Main {\n    public static void main(String[] args) throws InterruptedException{\n        //创建Result示例\n        Result result = new Result();\n        //创建FutureTask实例\n        FutureTask<String> futureTask = new FutureTask<>(result);\n        //创建线程\n        Thread thread = new Thread(futureTask);\n        //启动线程\n        thread.start();\n        try {\n            //获取执行结果\n            String str = futureTask.get();\n            //输出执行结果\n            System.out.println(str);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }catch (ExecutionException e){\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n## 总结\n\n| 创建方式 |         使用场景         |\n| :------: | :----------------------: |\n|  Thread  | 单继承（不建议在开发用） |\n| Runnable |        无返回任务        |\n| Callable |        有返回任务        |\n\n# 获取当前执行任务的线程 currentThread()\n\n~~~java\npackage main;\npublic class Main {\n    public static void main(String[] args){\n        //获取当前正在执行任务的线程\n        Thread thread = Thread.currentThread();\n        //输出当前线程\n        System.out.println(thread);\n    }\n}\n~~~\n\n输出结果：\n\n~~~java\nThread[main,5,main]\n~~~\n\nmain：线程的名称\n\n5：线程的优先级\n\nmain：线程所属的线程组名称\n\n# 获取和设置线程的名称、优先级\n\n## 获取线程名称 getName()\n\n~~~\nString str = thread.getName();\n~~~\n\n## 设置线程名称 setName(String name)\n\n~~~java\nthread.setName(\"在这里设置名称\");\n~~~\n\n## 获取线程优先级 getPriority()\n\n~~~\nint priority = thread.getPriority();\n~~~\n\n## 设置线程优先级 setPriority()\n\n~~~\nthread.setPriority();\n~~~\n\n### 常用优先级常量\n\n~~~java\n//最小优先级\npublic final static int MIN_PRIORITY = 1;\n//最大优先级\npublic final static int MAX_PRIORITY = 10;\n//默认优先级\npublic final static int NORM_PRIORITY = 5;\n~~~\n\n~~~\n//调用优先级常量（最大）\nthread.setPriority(Thread.MAX_PRIORITY);\n~~~\n\n# run()与start()区别\n\n## 位置\n\n虽然都在Thread，但是run方法重写自Runnable接口。\n\n## 类型\n\nrun是非同步方法，start是同步方法。\n\n## 作用\n\nrun存放执行代码，start启动线程，启动后执行run方法。\n\n## 是否产生线程\n\nrun不产生线程，start只产生一个线程。\n\n~~~java\npackage main;\npublic class Task implements Runnable {\n    @Override\n    public void run(){\n        //获取当前正在执行任务的线程\n        Thread thread = Thread.currentThread();\n        //获取线程名称\n        String threadName = thread.getName();\n        //打印线程的名称\n        System.out.println(threadName);\n    }\n}\n~~~\n\n~~~java\npackage main;\npublic class Main{\n    public static void main(String[] args){\n        //创建任务\n        Task task = new Task();\n        Thread thread = new Thread(task);\n        //调用run方法\n        thread.run();\n    }\n}\n~~~\n\n输出结果：\n\n~~~\nmain\n~~~\n\n## 调用次数\n\nrun可调用无限次，start只能调用一次。\n\n# 进入休眠 sleep()\n\n~~~java\n/**\n*@throws IllegalArgumentException 如果millis值为负数\n*@throws InterruptedException 如果有任何线程中断了当前线程。引发此异常时，将清除当前的中断状态。\n*/\npublic static native void sleep(long millis) throws InterruptedException\n~~~\n\n~~~java\n/**\n*@param nanos 额外指定睡眠时间的纳秒部分。范围为0-999999\n*@throws IllegalArgumentException 如果millis值为负数，或者nanos值不在范围内\n*@throws InterruptedException 如果有任何线程中断了当前线程。引发此异常时，将清除当前的中断状态。\n*/\npublic static void sleep(long millis, int nanos) throw InterruptedException\n~~~\n\n# 中断线程\n\n## 停止正在运行的线程\n\n### 中断标记 interrupt()\n\n~~~java\npackage main;\npublic class Task implements Runnable {\n    @Override\n    public void run(){\n        //无限打印语句\n        while(true){\n            System.out.println(\"正在运行\");\n        }\n    }\n}\n~~~\n\n~~~java\npackage main;\npublic class Main{\n\tpublic static void main(String[] args) throws InterruptedException{\n        Task task = new Task();\n        Thread thread = new Thread(task);\n        thread.start();\n        //使线程休眠1秒钟\n        Thread.sleep(1000);\n        //中断程序\n        thread.interrupt();\n    }\n}\n~~~\n\n输出结果：\n\n~~~\n正在运行\n正在运行\n正在运行\n...（不会停止）\n~~~\n\n原因：interrupt只是标记，中断操作要在run()方法里面操作。\n\n### 中断操作 isInterrupt()和interrupted()\n\n| 方法名称      | 类型                         | 作用                               |\n| ------------- | ---------------------------- | ---------------------------------- |\n| isInterrupted | 非静态方法                   | 判断线程是否被中断                 |\n| interrupted   | 静态方法（可通过类直接调用） | 判断线程是否被中断，并清除中断标记 |\n\nisInterrupted()：\n\n~~~java\npackage main;\npublic class Task implements Runnable {\n    @Override\n    public void run(){\n        //无限打印语句\n        while(true){\n            //获取当前正在执行的线程\n            Thread thread = Thread.currentThread();\n            //当线程被中断时\n            if(thread.isInterrupted()){\n                //结束循环\n                break;\n            }\n            System.out.println(\"正在运行\");\n        }\n    }\n}\n~~~\n\ninterrupted()：\n\n~~~java\npackage main;\npublic class Task implements Runnable {\n    @Override\n    public void run(){\n        //无限打印语句\n        while(true){\n            //当线程被中断时\n            if(Thread.interrupted()){\n                //结束循环\n                break;\n            }\n            System.out.println(\"正在运行\");\n        }\n    }\n}\n~~~\n\n一样效果，可结束线程\n\nisInterrupted()：\n\n~~~java\n...\n@Override\n    public void run(){\n    while(true){\n        Thread thread = Thread.currentThread();\n        //打印线程是否被中断\n        System.out.println(thread.isInterrupted());\n    }\n}\n~~~\n\n输出结果：\n\n~~~\nfalse\nfalse\n...\nfalse\ntrue\ntrue\n...\n~~~\n\ninterrupted()：\n\n~~~java\n...\n@Override\n    public void run(){\n    while(true){\n        //打印线程是否被中断\n        System.out.println(Thread.interrupted());\n    }\n}\n~~~\n\n输出结果：\n\n~~~\nfalse\nfalse\n...\nfalse\ntrue\nfalse\nfalse\n...\n~~~\n\n## 停止休眠中的线程\n\n~~~java\n...\n@Override\npublic void run(){\n    try{\n        //使当前线程休眠10秒钟\n        Thread.sleep(10000);\n    }catch (InterruptedException e){\n        e.printStackTrace();\n    }\n}\n~~~\n\n输出结果：\n\n~~~java\njava.lang.InterruptedException: sleep interrupted\n\tat java.base/java.lang.Thread.sleep(Native Method)\n\tat com.example.demo.Task.run(Task.java:8)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n~~~\n\n# 让别的线程得到更多执行权 yield()\n\n在run()方法中使用Thread.yield()方法可以让别的线程得到更多执行权，但不是放弃执行权。\n\n~~~java\npublic class PrintTask implements Runnable{\n    @Override\n    public void run(){\n        while (ValueTask.value==0){\n            Thread.yield();//让另一个线程得到更多执行权，减少空转\n        }\n        System.out.println(ValueTask.value);\n    }\n}\n~~~\n\n~~~java\npublic class ValueTask implements Runnable{\n    public static int value = 0;\n    @Override\n    public void run(){\n        System.out.println(6);\n        try{\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        value = 100;\n    }\n}\n~~~\n\n# 等待线程死亡 join()\n\n在一个线程中的run()方法中调用另一个线程的join()方法时，调用线程将被阻塞，直到另一个线程执行完为止（一定要在join()之前先start()，不然直接join直接结束）\n\n~~~java\n    public final void join() throws InterruptedException {\n        join(0);\n    }\n~~~\n\n~~~java\npublic class Task implements Runnable{\n    @Override\n    public void run(){\n        JoinTask joinTask = new JoinTask();\n        Thread joinThread = new Thread(joinTask);\n        System.out.println(JoinTask.value);\n        try {\n            joinThread.start();//一定要在join()之前先start()\n            joinThread.join();\n            System.out.println(JoinTask.value);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n~~~java\npublic class JoinTask implements Runnable{\n    public static int value = 0;\n    @Override\n    public void run(){\n        value = 100;\n    }\n}\n~~~\n\n# 守护线程（后台线程） daemon()\n\n## 设置守护线程 setDaemon()\n\n~~~java\npublic final void setDaemon(boolean on)\n~~~\n\n\n\n~~~java\npublic class Main {\n    public static void main(String[] args){\n        PrintTask printTask = new PrintTask();\n        Thread printThread = new Thread(printTask);\n        printThread.setDaemon(true);//要在start之前设置守护线程\n        printThread.start();\n        try {\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n~~~java\npublic class PrintTask implements Runnable{\n    @Override\n    public void run(){\n        while (true){\n            System.out.println(\"线程运行中\");\n        }\n    }\n}\n~~~\n\n线程在主线程结束时结束。\n\n## 判断线程是否为后台线程 isDaemon()\n\n~~~java\npublic final boolean isDaemon()\n~~~\n\n# 线程是否死亡 isAlive()\n\n~~~java\npublic final native boolean isAlive();\n~~~\n\n# *同步锁 synchronized\n\n线程获得同步锁对象后，只能该线程占用这个对象，其他线程必须等待该线程释放了该对象才能占用这个对象。解决线程安全问题。\n\n~~~\nsynchronized(object){}\n访问修饰符 synchronized 返回值类型 方法名(参数类型 参数名称){}\n访问修饰符 static synchronized 返回值类型 方法名(参数类型 参数名称){}\n~~~\n\n~~~java\npublic class Main {\n    public static void main(String[] args){\n        TicketingTask ticketingTask = new TicketingTask();//创建一个任务，多个线程执行该任务\n        Thread ticketingThread1 = new Thread(ticketingTask);\n        Thread ticketingThread2 = new Thread(ticketingTask);\n        Thread ticketingThread3 = new Thread(ticketingTask);\n        ticketingThread1.setName(\"1号\");\n        ticketingThread2.setName(\"2号\");\n        ticketingThread3.setName(\"3号\");\n        ticketingThread1.start();\n        ticketingThread2.start();\n        ticketingThread3.start();\n    }\n}\n~~~\n\n~~~java\npublic class TicketingTask implements Runnable{\n    private int ticket = 10;\n    @Override\n    public void run(){\n        while (ticket>0){\n            synchronized (this){\n                if(ticket>0){//要双重判断，因为在卖最后一票的时候另外2个线程同时锁外面等待。\n                    System.out.println(ticket+\"号票卖出，窗口为\"+Thread.currentThread().getName());\n                    ticket--;\n                }\n            }\n        }\n    }\n}\n~~~\n\n## 可同步的内容\n\n### 同步代码块\n\n~~~java\nsynchronized(对象){\n\t//需要被同步的代码\n}\n~~~\n\n### 同步方法\n\n~~~java\npublic synchronized void show (String name){\n}\n~~~\n\n### 同步类\n\n~~~java\nsynchronized(类名.class){}\n~~~\n\n\n\n## 死锁\n\n死锁指2个或2个以上的线程争夺彼此的锁，造成阻塞，程序永远处于阻塞状态。\n\n### 死锁产生的条件\n\n两个或两个以上的线程\n\n两个或两个以上的锁\n\n两个或两个以上的线程持有不同锁\n\n持有不同锁的线程争夺对方的锁\n\n### 示例\n\n~~~java\npublic class Main {\n    public static void main(String[] args){\n        LockA lockA = new LockA();\n        LockB lockB = new LockB();\n        lockA.start();\n        lockB.start();\n    }\n}\n~~~\n\n~~~java\npublic class LockA extends Thread{\n    @Override\n    public void run(){\n        printA();\n        //调用不同的锁\n    }\n    public static synchronized void printA(){\n        try{\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"A\");\n        LockB.printB();\n        //争夺B线程的锁\n    }\n}\n~~~\n\n~~~java\npublic class LockB extends Thread {\n    @Override\n    public void run(){\n        printB();\n        //调用不同的锁\n    }\n    public static synchronized void printB(){\n        try{\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"B\");\n        LockA.printA();\n        //争夺A线程的锁\n    }\n}\n~~~\n\n## 等待唤醒机制 wait(), notify()\n\n### wait()\n\n~~~java\n/**\n* 使当前线程等待，直到被唤醒。\n* @throws IllegalMonitorStateException 如果当前线程没有锁，则引发该异常。\n* @throws InterruptedException 如果当前线程被中断，则引发该异常。\n**/\npublic final void wait() throws InterruptedException\n~~~\n\n### notify()\n\n~~~java\n/**\n*唤醒单个线程。\n*@throws IllegalMonitorStateException 如果当前线程没有拥有锁，则引发该异常。\n*/\npublic final native void notify()\n~~~\n\n示例\n\n~~~java\npublic class LockA extends Thread{\n    @Override\n    public void run(){\n        printA();\n    }\n    public static synchronized void printA(){\n        try{\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"A\");\n        synchronized (LockB.class){//使当前线程有对应的锁\n            LockB.class.notify();//唤醒线程\n        }\n    }\n}\n~~~\n\n~~~java\npublic class LockB extends Thread {\n    @Override\n    public void run(){\n        printB();\n    }\n    public static synchronized void printB(){\n        try{\n            Thread.sleep(1000);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        try{\n            LockB.class.wait();//等待唤醒\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"B\");\n    }\n}\n~~~\n\n### 唤醒所有线程 notifyAll() ，使用方法和notify类似\n\n### wait()和sleep()区别\n\n|                          | sleep()            | wait()                 |\n| ------------------------ | ------------------ | ---------------------- |\n| 位置                     | Thread类           | Object类               |\n| 是否需要当前线程拥有锁？ | 不需要             | 需要                   |\n| 是否支撑手动唤醒？       | 不支持             | notify()、notifyAll()  |\n| 是否支持自动唤醒？       | sleep(long millis) | wait(long timeout)     |\n| 是否支持中断？           | interrupt          | interrupt              |\n| 是否释放锁？             | 否                 | 是                     |\n| 线程状态                 | TIMED_WAITING      | WAITING、TIMED_WAITING |\n\n# ","tags":["多线程"]},{"title":"下载加速（长期更新）","url":"/2023/03/30/下载加速（长期更新）/","content":"\n​\t本博客暂时演示Windows版的各种常用下载和加速，以后可能会更新安卓版的。如果方法失效了可以在评论区留言，我会再找新的方法。\n\n# 百度网盘下载慢\n\n​\t正常下载安装百度网盘客户端，依次点击右上角的设置->传输->优化速率那一栏的去开启\n\n![image-20230330201611102](https://s1.vika.cn/space/2023/03/30/1b178e8c5ecc436fb4b8b2de164a2d62)\n\n​\t点击同意的√->开启优化速率，然后点右下角的应用就行了。\n\n![image-20230330201832151](https://s1.vika.cn/space/2023/03/30/9ca649e5e5f741a894d904558cc44602)\n\n# 磁链下载慢、从浏览器下载慢\n\n​\t参考知乎这篇文章下载安装配置idm。[干货：史上速度最快的下载器IDM的安装使用（保姆级教程）附安装包 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/585444349)\n\n# GitHub源代码/发行文件下载慢\n\n​\t先安装并配置好上面的idm，然后复制GitHub上的源代码/发行文件的HTTPS链接，打开[Doget - Github release 下载，文件下载加速 (nocsdn.com)](https://doget.nocsdn.com/#/)并把链接粘贴解析。解析完成复制下面的磁链到idm下载。\n\n# xbox商店下载慢\n\n打开设置（按win+i)->左侧的网络和Internet->如果和我一样用wifi的话就点WLAN->正在连接的WiFi名字属性->DNS服务器分配那一栏点编辑->改成手动->IPv4开->设置首选DNS和备用DNS（后面会给出，选择最快的那个就行了）->保存->重开wifi\n\n![image-20230330203945426](https://s1.vika.cn/space/2023/03/30/e0b7ebe2fd9f4a8ca99ed62aa9967541)\n\n```\n方案一：主DNS：4.2.2.1；辅助DNS：114.114.114.114\n方案二：主DNS：114.114.114.114；辅助DNS：114.114.115.115\n方案三：主DNS：4.2.2.1；辅助DNS：4.2.2.2\n方案四：主DNS：168.126.63.1；辅助DNS：168.126.63.2\n方案五：主DNS：123.125.81.6；辅助DNS：140.207.198.6\n方案六：主DNS：198.153.192.40；辅助DNS：198.153.194.40\n```\n\n# QQ文件下载慢\n\n​\t先把文件转发然后下载。","tags":["下载"]},{"title":"后端术语（长期更新）","url":"/2023/03/27/后端术语（长期更新）/","content":"\n# A\n\n# B\n\n并发(concurrency)：指2个或多个事件在同一个时间段内发生。在一段时间内，有多条指令在单个CPU上快速轮换、交替执行，使得在宏观上具有多个进程同步时执行的效果。\n\n![image-20230412190546582](https://s1.vika.cn/space/2023/04/12/da17c27b96514504b21224096dac0aee)\n\n并行(parallel)：指2个或以上的事件在同一时刻发生，同一时刻，有多条指令在多个CPU上同时运行。\n\n![image-20230412190251593](https://s1.vika.cn/space/2023/04/12/de2a7a7ffcbd484a81d26567546ce10f)\n\n# C\n\n程序(program)：为完成特定任务，用某种语言编写的一种指令的集合。即指一段静态的代码，静态对象。\n\n池化思想(pooling)：为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。\n\n# D\n\n# E\n\n# F\n\n反射(reflection)：是指程序在运行时可以访问、检测和修改它本身状态或者行为的一种能力。用比喻来说，反射就是在程序运行时能够“观察”并且修改自己的行为。java中，是指在运行状态中，对于任意一个类，都能够智斗这个类的所有属性和方法；对于任意一个对象，都能调用它的任意方法和属性。\n\n分时系统(time-sharing)：是计算机科学中对资源的一种共享方式，利用多道程序与多任务处理使多个用户可以同时使用一台计算机。\n\n# G\n\n关系数据库(relational database)：关系数据库是一种用于存储**相互关联的数据点**并提供数据点访问的数据库。它采用关系模型，直接、直观地在表中展示数据。在关系数据库中，表中的每一行都代表一条记录，每条记录都具有一个唯一的 ID（又被称为键），而表中的列则用于存储数据的属性 — 每条记录的每一个属性通常都有一个值。\n\n# H\n\n# I\n\n# J\n\n进程(process)：程序的一次执行过程，或是正在内存中运行的应用程序。与程序不同，进程是动态的。进程是**操作系统**调度和分配资源的最小单位（也是系统运行程序的基本单位），系统在运行时分配不同的内存空间区域。\n\n# K\n\n# L\n\n# M\n\n# N\n\n内核(kernel)：属于操作系统的一部分，是真正与硬件交互的部分，还负责分配资源。\n\n# O\n\n# P\n\n# Q\n\n# R\n\n# S\n\n时间片(timeslice)：是分时系统分配给每个正在运行的进程微观上的一段CPU时间。\n\n# T\n\n同步机制(synchronized)：Java中用于解决多线程并发访问一个资源的安全性问题（类似解决重复票与不存在票的问题）。使用同步锁。\n\n同步锁(synchronization lock)：任何线程想要执行某段被同步锁锁住的代码，都要先获得该锁。\n\n# U\n\n# V\n\n# W\n\n# X\n\n线程(thread)：进程可进一步细化为线程，是程序内部的一条执行路径。一个进程中至少有一个线程。一个进程同一时间若并行多个线程，就是支持多线程的。线程是**CPU**调度和执行的最小单位。一个进程中的多个线程共享相同的内存单元，从同一堆中分配对象，可使用相同的变量和对象。虽然高效但可能会有安全问题。单核CPU是假的多线程，是用到了并发。\n\n线程调度(thread scheduling)：指操作系统决定哪个线程将获得处理器的时间片运行，哪些线程将被暂停或者阻塞。\n\n线程池(thread pool)：一种基于池化思想管理线程的工具。线程池维护多个线程，等待监督管理者分配可并发执行的任务。本质是对任务和线程的管理。\n\n# Y\n\n# Z\n\n字段(field)：在计算机科学中，字段是指关系数据库中表的**一列**。在面向对象编程中，字段（也称为数据成员或成员变量）是封装在类或对象内部的特定数据。\n\n阻塞队列(BlockingQueue)：是一个支持两个附加操作的队列。","tags":["术语"]},{"title":"v2ray使用教程","url":"/2023/03/17/v2ray使用教程/","content":"\n本文只展示Windows版本和Android版本的演示。\n\n# Windows版\n\n1.先去GitHub下载对应的版本：[Releases · 2dust/v2rayN (github.com)](https://github.com/2dust/v2rayN/releases)，请注意看里面的说明。本文演示的版本为V6.18。\n\n2.下载好后解压文件夹，解压的位置不能选择在如C:\\Program Files这种需要管理员权限的位置，因为解压到这些位置会有打不开的bug。不知道之后的版本会不会修复。\n\n3.解压好之后打开v2rayN.exe（最好右键以管理员身份运行）。这时候你有两种选择。\n\n## 选择订阅（推荐）\n\n1.点击上面那一栏的订阅分组->订阅分组设置->添加。\n\n![v2ray使用教程1](https://s1.vika.cn/space/2023/03/19/0626a6c337a64446b0d70c911511eb8b)\n\n![v2ray使用教程2](https://s1.vika.cn/space/2023/03/19/4e23dbff40f34a5db3f54fc27310a05b)\n\n2.别名随便取一个，可选地址我找了一些订阅链接，也可以选择你自己找到的订阅地址（如在[github.com](https://github.com)搜索v2ray，然后Sort选择Recently updated），之后自己慢慢找。其他的可以暂时不用填。建议多订阅几个。\n\n```http\nhttps://raw.githubusercontent.com/ssrsub/ssr/master/V2Ray\nhttps://9527521.xyz/pubconfig/5jJlofW2hzG8krXU\n```\n\n3.添加完成后回到软件主界面，点击订阅分组->更新全部订阅（不通过代理）然后等待下方信息栏出现配置成功。\n\n![v2ray使用教程3](https://s1.vika.cn/space/2023/03/19/a0a8d80110ba45389d5052d9334d0107)\n\n4.按快捷键Ctrl+A全选服务器，然后右键，选择测试服务器真链接延迟（多选）（Ctrl+R），测试延迟。\n\n![v2ray使用教程4](https://s1.vika.cn/space/2023/03/19/1128eecfce934f63a3a4f2b00125725e)\n\n5.在每个节点的最右边都会显示延迟。如果想要快速找到低延迟节点，则点击一下 延迟 来排序。鼠标选择好节点后按Enter键勾选。\n\n![v2ray使用教程5](https://s1.vika.cn/space/2023/03/19/0b584178492b4185be14b05cb0b08288)\n\n6.在任务栏找到v2ray并右键，建议选择自动配置系统代理。然后就可以科学上网了。\n\n![v2ray使用教程6](https://s1.vika.cn/space/2023/03/19/446a587bd50f49d194708f5082c56011)\n\n7.以后的使用就只用测试节点延迟和连接就行了，如果节点延迟都是-1那就更新一下订阅。如果无效服务器太多，可以全选后右键移除所有服务器再更新订阅。\n\n## 选择自己找节点\n\n1.下面提供的节点估计很快就会无效。可以自己去[github.com](https://github.com)上搜索v2ray，然后Sort选择Recently updated。\n\n```\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E5%89%A9%E4%BD%99%E6%B5%81%E9%87%8F%EF%BC%9A10%20GB\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E5%A5%97%E9%A4%90%E5%88%B0%E6%9C%9F%EF%BC%9A%E9%95%BF%E6%9C%9F%E6%9C%89%E6%95%88\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E8%AF%B7%E6%9D%A5%E5%AE%98%E7%BD%91%E6%9B%B4%E6%96%B0%E8%AE%A2%E9%98%85\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E5%AE%98%E7%BD%91%E5%9C%B0%E5%9D%80%EF%BC%9A%20mikasacloud.site\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E6%B0%B8%E4%B9%85%E5%9F%9F%E5%90%8D%E5%8F%91%E5%B8%83%E9%A1%B5%EF%BC%9Amcrelease.xyz\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p01.mcfront.xyz:31116?allowInsecure=0&peer=jp01.lovemc.xyz&sni=jp01.lovemc.xyz#%E6%97%A5%E6%9C%AC%2001%20%7C%201x%20JP\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p02.mcfront.xyz:31106?allowInsecure=1&peer=jp02.lovemc.xyz&sni=jp02.lovemc.xyz#%E6%97%A5%E6%9C%AC%2002%20%20%7C%201x%20JP\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6w7j3p03.mcfront.xyz:31111?allowInsecure=0&peer=jp03.lovemc.xyz&sni=jp03.lovemc.xyz#%E6%97%A5%E6%9C%AC%2003%20%20%7C%201x%20JP\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWU1XHU2NzJjIDA0ICB8IDF4IEpQIiwiYWRkIjoiNnc3ajNwMDQubWNmcm9udC54eXoiLCJwb3J0IjoiMzExMTYiLCJpZCI6IjliYjQyYzZlLTI5NzMtNDI2Ni1hZjRmLWFkM2JlNGVmNGQ5OCIsImFpZCI6IjAiLCJuZXQiOiJ0Y3AiLCJ0eXBlIjoibm9uZSIsImhvc3QiOiIiLCJwYXRoIjoiIiwidGxzIjoidGxzIiwic25pIjoianAwNC5sb3ZlbWMueHl6In0=\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWU1XHU2NzJjIDA1ICB8IDF4IEpQIiwiYWRkIjoiNnc3ajNwMDUubWNmcm9udC54eXoiLCJwb3J0IjoiMzExMDYiLCJpZCI6IjliYjQyYzZlLTI5NzMtNDI2Ni1hZjRmLWFkM2JlNGVmNGQ5OCIsImFpZCI6IjAiLCJuZXQiOiJ0Y3AiLCJ0eXBlIjoibm9uZSIsImhvc3QiOiIiLCJwYXRoIjoiIiwidGxzIjoidGxzIiwic25pIjoianAwNS5sb3ZlbWMueHl6In0=\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWU1XHU2NzJjIDA2ICB8IDF4IEpQIiwiYWRkIjoiNnc3ajNwMDYubWNmcm9udC54eXoiLCJwb3J0IjoiMzExMTEiLCJpZCI6IjliYjQyYzZlLTI5NzMtNDI2Ni1hZjRmLWFkM2JlNGVmNGQ5OCIsImFpZCI6IjAiLCJuZXQiOiJ0Y3AiLCJ0eXBlIjoibm9uZSIsImhvc3QiOiIiLCJwYXRoIjoiIiwidGxzIjoidGxzIiwic25pIjoianAwNi5sb3ZlbWMueHl6In0=\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@5m4h0k01.mcfront.xyz:31601?allowInsecure=0&peer=hk01.lovemc.xyz&sni=hk01.lovemc.xyz#%E9%A6%99%E6%B8%AF%2001%20%7C%201x%20HK\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@5m4h0k02.mcfront.xyz:31606?allowInsecure=0&peer=hk02.lovemc.xyz&sni=hk02.lovemc.xyz#%E9%A6%99%E6%B8%AF%2002%20%7C%201x%20HK\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@5m4h0k03.mcfront.xyz:31611?allowInsecure=0&peer=hk03.lovemc.xyz&sni=hk03.lovemc.xyz#%E9%A6%99%E6%B8%AF%2003%20%7C%201x%20HK\nvmess://eyJ2IjoiMiIsInBzIjoiXHU5OTk5XHU2ZTJmIDA0IHwgMXggSEsiLCJhZGQiOiI1bTRoMGswNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTYwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJoazA0LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU5OTk5XHU2ZTJmIDA1IHwgMXggSEsiLCJhZGQiOiI1bTRoMGswNS5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTYwNiIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJoazA1LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU5OTk5XHU2ZTJmIDA2IHwgMXggSEsiLCJhZGQiOiI1bTRoMGswNi5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTYxMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJoazA2LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@2d1t5w01.mcfront.xyz:31301?allowInsecure=0&peer=tw01.lovemc.xyz&sni=tw01.lovemc.xyz#%E5%8F%B0%E6%B9%BE%2001%20%20%7C%201x%20TWN\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@2d1t5w02.mcfront.xyz:31306?allowInsecure=0&peer=tw02.lovemc.xyz&sni=tw02.lovemc.xyz#%E5%8F%B0%E6%B9%BE%2002%20%20%7C%201x%20TWN\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@2d1t5w03.mcfront.xyz:31311?allowInsecure=0&peer=tw03.lovemc.xyz&sni=tw03.lovemc.xyz#%E5%8F%B0%E6%B9%BE%2003%20%20%7C%201x%20TWN\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1M2YwXHU2ZTdlIDA0ICB8IDF4IFRXTiIsImFkZCI6IjJkMXQ1dzA0Lm1jZnJvbnQueHl6IiwicG9ydCI6IjMxMzAxIiwiaWQiOiI5YmI0MmM2ZS0yOTczLTQyNjYtYWY0Zi1hZDNiZTRlZjRkOTgiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6InRscyIsInNuaSI6InR3MDQubG92ZW1jLnh5eiJ9\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1M2YwXHU2ZTdlIDA1ICB8IDF4IFRXTiIsImFkZCI6IjJkMXQ1dzA1Lm1jZnJvbnQueHl6IiwicG9ydCI6IjMxMzA2IiwiaWQiOiI5YmI0MmM2ZS0yOTczLTQyNjYtYWY0Zi1hZDNiZTRlZjRkOTgiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6InRscyIsInNuaSI6InR3MDUubG92ZW1jLnh5eiJ9\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1M2YwXHU2ZTdlIDA2ICB8IDF4IFRXTiIsImFkZCI6IjJkMXQ1dzA2Lm1jZnJvbnQueHl6IiwicG9ydCI6IjMxMzExIiwiaWQiOiI5YmI0MmM2ZS0yOTczLTQyNjYtYWY0Zi1hZDNiZTRlZjRkOTgiLCJhaWQiOiIwIiwibmV0IjoidGNwIiwidHlwZSI6Im5vbmUiLCJob3N0IjoiIiwicGF0aCI6IiIsInRscyI6InRscyIsInNuaSI6InR3MDYubG92ZW1jLnh5eiJ9\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@1c7s2g01.mcfront.xyz:31201?allowInsecure=0&peer=sg01.lovemc.xyz&sni=sg01.lovemc.xyz#%E6%96%B0%E5%8A%A0%E5%9D%A1%2001%20%20%7C%201x%20SG\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@1c7s2g02.mcfront.xyz:31206?allowInsecure=0&peer=sg02.lovemc.xyz&sni=sg02.lovemc.xyz#%E6%96%B0%E5%8A%A0%E5%9D%A1%2002%20%7C%201x%20SG\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@1c7s2g03.mcfront.xyz:31211?allowInsecure=0&peer=sg03.lovemc.xyz&sni=sg03.lovemc.xyz#%E6%96%B0%E5%8A%A0%E5%9D%A1%2003%20%7C%201x%20SG\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWIwXHU1MmEwXHU1NzYxIDA0IHwgMXggU0ciLCJhZGQiOiIxYzdzMmcwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTIwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJzZzA0LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWIwXHU1MmEwXHU1NzYxIDA1IHwgMXggU0ciLCJhZGQiOiIxYzdzMmcwNS5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTIwNiIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJzZzA1LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2NWIwXHU1MmEwXHU1NzYxIDA2IHwgMXggU0ciLCJhZGQiOiIxYzdzMmcwNi5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTIxMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJzZzA2LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@4a2u0a01.mcfront.xyz:31501?allowInsecure=0&peer=us01.lovemc.xyz&sni=us01.lovemc.xyz#%E7%BE%8E%E5%9B%BD%2001%20%7C%201x%20US\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@4a2u0a02.mcfront.xyz:31506?allowInsecure=0&peer=us02.lovemc.xyz&sni=us02.lovemc.xyz#%E7%BE%8E%E5%9B%BD%2002%20%7C%201x%20US\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@4a2u0a03.mcfront.xyz:31511?allowInsecure=0&peer=us03.lovemc.xyz&sni=us03.lovemc.xyz#%E7%BE%8E%E5%9B%BD%2003%20%7C%201x%20US\nvmess://eyJ2IjoiMiIsInBzIjoiXHU3ZjhlXHU1NmZkIDA0IHwgMXggVVMiLCJhZGQiOiI0YTJ1MGEwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTUwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJ1czA0LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU3ZjhlXHU1NmZkIDA1IHwgMXggVVMiLCJhZGQiOiI0YTJ1MGEwNS5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTUwNiIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJ1czA1LmxvdmVtYy54eXoifQ==\nvmess://eyJ2IjoiMiIsInBzIjoiXHU3ZjhlXHU1NmZkIDA2IHwgMXggVVMiLCJhZGQiOiI0YTJ1MGEwNi5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTUxMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJ1czA2LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@8l2k1r01.mcfront.xyz:31401?allowInsecure=0&peer=kr01.lovemc.xyz&sni=kr01.lovemc.xyz#%E9%9F%A9%E5%9B%BD%2001%20%7C%201x%20KR\nvmess://eyJ2IjoiMiIsInBzIjoiXHU5N2U5XHU1NmZkIDAyIHwgMXggS1IiLCJhZGQiOiI4bDJrMXIwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTQwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJrcjA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@1a4p0h01.mcfront.xyz:31801?allowInsecure=0&peer=ph01.lovemc.xyz&sni=ph01.lovemc.xyz#%E8%8F%B2%E5%BE%8B%E5%AE%BE%2001%20%7C%201x%20PH\nvmess://eyJ2IjoiMiIsInBzIjoiXHU4M2YyXHU1ZjhiXHU1YmJlIDA0IHwgMXggUEgiLCJhZGQiOiIxYTRwMGgwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTgwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJwaDA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@4t1r5u01.mcfront.xyz:31851?allowInsecure=0&peer=ru01.lovemc.xyz&sni=ru01.lovemc.xyz#%E4%BF%84%E7%BD%97%E6%96%AF%2001%20%7C%201x%20RU\nvmess://eyJ2IjoiMiIsInBzIjoiXHU0ZmM0XHU3ZjU3XHU2NWFmIDA0IHwgMXggUlUiLCJhZGQiOiI0dDFyNXUwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTg1MSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJydTA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@6q3i1n01.mcfront.xyz:31831?allowInsecure=0&peer=in01.lovemc.xyz&sni=in01.lovemc.xyz#%E5%8D%B0%E5%BA%A6%2001%20%7C%201x%20IN\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1MzcwXHU1ZWE2IDA0IHwgMXggSU4iLCJhZGQiOiI2cTNpMW4wNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTgzMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJpbjA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@4o5a3u01.mcfront.xyz:31821?allowInsecure=0&peer=au01.lovemc.xyz&sni=au01.lovemc.xyz#%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%2001%20%7C%201x%20AU\nvmess://eyJ2IjoiMiIsInBzIjoiXHU2ZmIzXHU1OTI3XHU1MjI5XHU0ZTlhIDA0IHwgMXggQVUiLCJhZGQiOiI0bzVhM3UwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTgyMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJhdTA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@3a4u0k01.mcfront.xyz:31811?allowInsecure=0&peer=uk01.lovemc.xyz&sni=uk01.lovemc.xyz#%E8%8B%B1%E5%9B%BD%2001%20%7C%201x%20UK\nvmess://eyJ2IjoiMiIsInBzIjoiXHU4MmYxXHU1NmZkIDA0IHwgMXggVUsiLCJhZGQiOiIzYTR1MGswNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTgxMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJ1azA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@9t1d5e01.mcfront.xyz:31841?allowInsecure=0&peer=de01.lovemc.xyz&sni=de01.lovemc.xyz#%E5%BE%B7%E5%9B%BD%2001%20%7C%201x%20DE\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1ZmI3XHU1NmZkIDA0IHwgMXggQVUiLCJhZGQiOiI5dDFkNWUwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTg0MSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJkZTA0LmxvdmVtYy54eXoifQ==\ntrojan://9bb42c6e-2973-4266-af4f-ad3be4ef4d98@3d1c4a01.mcfront.xyz:31701?allowInsecure=0&peer=ca01.lovemc.xyz&sni=ca01.lovemc.xyz#%E5%8A%A0%E6%8B%BF%E5%A4%A7%2001%20%7C%201x%20CA\nvmess://eyJ2IjoiMiIsInBzIjoiXHU1MmEwXHU2MmZmXHU1OTI3IDAyIHwgMXggQ0EiLCJhZGQiOiIzZDFjNGEwNC5tY2Zyb250Lnh5eiIsInBvcnQiOiIzMTcwMSIsImlkIjoiOWJiNDJjNmUtMjk3My00MjY2LWFmNGYtYWQzYmU0ZWY0ZDk4IiwiYWlkIjoiMCIsIm5ldCI6InRjcCIsInR5cGUiOiJub25lIiwiaG9zdCI6IiIsInBhdGgiOiIiLCJ0bHMiOiJ0bHMiLCJzbmkiOiJjYTA0LmxvdmVtYy54eXoifQ==\n```\n\n2.一大串这种东西直接复制后，点击服务器->从剪贴板导入批量URL。之后的方法步骤和上面的`选择订阅（推荐）`中4-6是一样的。\n\n![image-20230319164934380](https://s1.vika.cn/space/2023/03/19/111f258650a041d78b47401b6de98c17)\n\n如果服务器都无效了，那只能自己再去找URL了。\n\n# Android版\n\n先去GitHub下载[v2rayNG](https://github.com/2dust/v2rayNG/releases)，最好选择带有绿色Latest版本（本文章演示的是1.7.38版本），下载v2rayNG_1.7.38.apk。下载安装好后，打开软件。\n\n![image-20230319170005116](https://s1.vika.cn/space/2023/03/19/bf9dcfd784ca4878b2a00cfa812f6f3b)\n\n## 选择订阅（推荐）\n\n1.点左上角->订阅分组测试\n\n![image-20230319170215164](https://s1.vika.cn/space/2023/03/19/ea451fd656b6488da7e5c76c4b815ac1)\n\n2.点击左上角的+号，备注随便写，可选地址填订阅链接。我找了一些订阅链接，也可以选择你自己找到的订阅地址（如在[github.com](https://github.com)搜索v2ray，然后Sort选择Recently updated），之后自己慢慢找。其他的可以暂时不用填。建议多订阅几个。\n\n```http\nhttps://raw.githubusercontent.com/ssrsub/ssr/master/V2Ray\nhttps://9527521.xyz/pubconfig/5jJlofW2hzG8krXU\n```\n\n![image-20230319170559096](https://s1.vika.cn/space/2023/03/19/84ba87fde72d4c6b93d55bfc90e410ea)\n\n3.填好后点右上角√，然后选择订阅链接（左边有绿色竖线即为选中）\n\n![image-20230319170740397](https://s1.vika.cn/space/2023/03/19/fdc1e61c2cec473ea73097a4c41ab058)\n\n4.回到软件主界面，点右上角三个点->更新订阅。更新完后点右上角三个点->测试全部配置真连接。测试完后点右上角三个点->按测试结果排序，选择延迟小的就行了。\n\n![image-20230319171121936](https://s1.vika.cn/space/2023/03/19/a225684cd36d478c975d21619d78c516)\n\n## 选择自己找节点\n\n1.节点选择和Windows版的`选择自己找节点`的1一样，将URL复制。\n\n2.点右上角的+号->从剪贴板导入。之后的方法和Android版的`选择订阅（推荐）`的4一样，不过不用更新订阅。\n\n![image-20230319172457795](https://s1.vika.cn/space/2023/03/19/d332dd3f8fbb4e939ca75e8ff4b97434)\n\n","tags":["v2ray"]},{"title":"博客搭建","url":"/2023/03/13/博客搭建/","content":"\n​\t该文章基于[aircloud/hexo-theme-aircloud: A concise hexo theme (github.com)](https://github.com/aircloud/hexo-theme-aircloud)的hexo博客主题搭建，里面虽然已经有教程，但是当我这个小白照着做的时候仍然遇到一些问题。所以现在写一篇文章来聊聊我遇到的一些问题吧。\n\n# 中文问题\n\n​\t默认是英文页面。需要改为中文。\n\n![博客搭建1](https://s1.vika.cn/space/2023/03/19/477652458b5c4af0b21f42037a5458b3)\n\n​\t找到_config.yml，将language: en一栏改为language: zh\n\n![博客搭建2](https://s1.vika.cn/space/2023/03/19/e781b6ab1669442d832039c57c78104a)\n\n\n​\t部署hexo s查看情况\n\n![博客搭建3](https://s1.vika.cn/space/2023/03/19/bd46642db0514b07b8969f4e5cd65b9d)\n\n\n# \t头像问题\n\n​\t跟着做之后，我遇到了头像无法正确解析的问题。\n\n![博客搭建4](https://s1.vika.cn/space/2023/03/19/7d7d75589d8a4f96a9653ca88e1f0896)\n\n\n​\t这可能是原博客的设置问题，通过以下方法即可解决。\n\n​\t1.打开\\themes\\hexo-theme-aircloud\\layout\\_partial\\nav.ejs，找到\n\n```ejs\n<img src=\"<%= config['root'] %><%= config['sidebar-avatar'] %>\" />\n```\n\n![博客搭建5](https://s1.vika.cn/space/2023/03/19/c9c62f55d5684904ae5a21bdfda62fe8)\n\n\n​\t将这一行改为\n\n```ejs\n<img src=\"<%=theme.avatar%>\" class=\"js-avatar show\" />\n```\n\n![博客搭建6](https://s1.vika.cn/space/2023/03/19/fd563d2074d3406ab832e90153b5e482)\n\n\n​\t2.将自己的头像放在\\themes\\hexo-theme-aircloud\\source\\img\\下\n\n![博客搭建7](https://s1.vika.cn/space/2023/03/19/f804f275660e4fceaded1aa88027decc)\n\n\n​\t3.打开\\themes\\hexo-theme-aircloud\\_config.yml，在后面添加下面代码（将avatar.jpg改为自己的图像文件名，如果用图床方法则改为url，具体方法参考后面的部署到图床上）\n\n```yaml\navatar: /img/avatar.jpg\n```\n\n![博客搭建8](https://s1.vika.cn/space/2023/03/19/7ca3b453aef4408ab95f25a0db8754bc)\n\n\n​\t4.部署hexo s查看情况\n\n![博客搭建9](https://s1.vika.cn/space/2023/03/19/3a4c6d72b575458b853f4405913a23f4)\n\n\n# 博客文章加载问题\n\n​\t当我点开博客文章的时候，显示\n\n![博客搭建10](https://s1.vika.cn/space/2023/03/19/0ca8c43ffa434308bc4148c6de8cced8)\n\n\n​\t这是因为_config.yml默认设置问题，将里面的url改改就行了。如果本地测试改成http://localhost:4000\n\n![博客搭建11](https://s1.vika.cn/space/2023/03/19/3f6de59f96f14130bd6786618966208e)\n\n​\t之后就可以正常打开文章了。\n\n# 图片问题\n\n## 图片插入两种方法\n\n### 直接放到本地\n\n​\t优点：直接\n\n​\t缺点：GitHub加载图片慢，且图片保存在本地占空间，每次插入图片都要自己输入路径，还不能在本地Typora加载图片。本主题还会将小图片拉大。\n\n​\t图片直接放到本地博客\\source\\img\\下，然后在Typora下想要插入图片的位置加上\n\n```markdown\n![](/img/xxx.jpg)\n```\n\n### 部署到图床上（推荐）\n\n​\t优点：选择国内服务器的话图片加载快，省本地空间，Typora与PicGo搭配效率高。\n\n​\t缺点：第一次部署相对麻烦，不够直接，图片不保存在本地可能会被删库跑路（也可以自己备份就是了）。\n\n​\t先介绍几个概念。\n\n#### 图床\n\n​\t图床一般是指储存图片的服务器。选择国内的图床加载快。下面给出一些免费的图床网站，本博客只演示目前在我这里最快的图床——vika。\n\n​\t维格表vika：https://vika.cn/\n\n​\tImgTP：https://www.imgtp.com/\n\n​\tbilibilli（用这个怕被叔叔封号，且存在跨域问题）：https://www.bilibili.com/\n\n#### PicGo\n\n​\tPicGo是一个用于快速上传图片并获取图片 URL 链接的工具，关键是他可以与Typora配套一起使用，在粘贴图片的同时上传图片，十分方便！\n\n​\t[Releases · Molunerfinn/PicGo (github.com)](https://github.com/Molunerfinn/PicGo/releases)\n\n​\t建议优先选择带有绿色Latest版本，本文演示的是2.3.1版本，本人是Windows64位系统，我选择下载[PicGo-Setup-2.3.1-x64.exe](https://github.com/Molunerfinn/PicGo/releases/download/v2.3.1/PicGo-Setup-2.3.1-x64.exe)版本，并安装。\n\n![image-20230319123114541](https://s1.vika.cn/space/2023/03/19/1b51fd1f239f4e3693c4ccd4448e6665)\n\n​\t安装后打开可能会提示要更新，建议先不要更新。然后点开插件设置，搜索并安装vikadata插件。\n\n![image-20230319124309658](https://s1.vika.cn/space/2023/03/19/597fb7d068cb4d1f912075f4f7ee7441)\n\n​\t安装好后重启一下软件，点开PicGo设置，滑到最下面把请选择显示的图床都取消勾选，留下vika维格表（如果你用其他的图床就不要取消那个勾选）\n\n![image-20230319124426477](https://s1.vika.cn/space/2023/03/19/46165414339d4269b9786b6eb410aa74)\n\n​\t点图床设置->vika维格表\n\n![image-20230319124648183](https://s1.vika.cn/space/2023/03/19/41410fcfc8914ef795df9098d03859e7)\n\n\n\n​\t之后在vika注册账号，注册好登录后可以填我邀请码05665721，能拿1000 V币，3000 V币可以找客服扩容。点左下角头像->邀请好友注册领取1000 V币里面填写即可。\n\n![image-20230319140715681](https://s1.vika.cn/space/2023/03/19/0d73d007e1bf4226978d916bde01c5b5)\n\n​\t一个空间有1G的容量，每个人大概可以创建10个空间，一个图片也才几百KB，所以这些完全够用了。\n\n​\t接下来创建维格表点+号->新建空白维格表。\n\n![image-20230319141129630](https://s1.vika.cn/space/2023/03/19/c5ff5c1293494d45be0817a44e4facdf)\n\n​\t可重命名为`图床`\n\n![image-20230319143131038](https://s1.vika.cn/space/2023/03/19/9c96a3142a464677b9aa7f4cc73354a4)\n\n#### 获取API Token\n\n​\t随后点击左下角头像->个人设置，绑定自己的邮箱后，获取`API Token`\n\n![image-20230319160531198](https://s1.vika.cn/space/2023/03/19/60f54a3925e841c293e027b122a7c252)\n\n![image-20230319141859374](https://s1.vika.cn/space/2023/03/19/a2d2cb6639814337966aed7e51132e95)\n\n![image-20230319142109256](https://s1.vika.cn/space/2023/03/19/b8d29fee0e3a4659a6577beb4b7c1f78)\n\n#### 获取维格表ID\n\n![image-20230319142639209](https://s1.vika.cn/space/2023/03/19/d39fcbea64e8498392f8d2a55815bf81)\n\n![image-20230319143541221](https://s1.vika.cn/space/2023/03/19/814dc100ab3b4f2db217fecda7c6d000)\n\n​\t另外两栏可以选默认。点确定后可以试试上传。可以自己调链接格式。\n\n![image-20230319143541221](https://s1.vika.cn/space/2023/03/19/9ce04d4222e74270bc9098ce0d19d9b6)\n\n上传成功后可以点相册->复制到markdown或者浏览器查看情况。\n\n![image-20230319143541221](https://s1.vika.cn/space/2023/03/19/169c0a0114fe41c4b8536885f1215742)\n\n#### 设置Typroa\n\n​\t点文件->偏好设置\n\n![image-20230319143541221](https://s1.vika.cn/space/2023/03/19/14ddaa3c50a74974ab93b90114cfdf79)\n\n​\t点开后按照图片那样设置。\n\n![image-20230319150646293](https://s1.vika.cn/space/2023/03/19/29103acb094144d695b80a5b576f5432)\n\n![image-20230319150246053](https://s1.vika.cn/space/2023/03/19/a3bd8fa3a37d4d2f97793af966210c77)\n\n设置好后你可以直接复制粘贴到markdown并自动上传图片了，十分方便。\n\n### 当使用本地图片时\n\n如果用以下插入图片的方法\n\n```markdown\n![](本地路径)\n```\n\n​\t设置的图片大小可能会小图片拉大太糊，或者长图片显示太小，于是建议使用嵌入HTML代码的方法来自定义大小直至到满意的尺寸。\n\n​\t1.先在\\source\\img\\下放自己想要的图片，如test.jpg\n\n<div  align=\"center\">\n\t<img src=\"/img/博客搭建/博客搭建12.jpg\" />\n</div>\n\n\n​\t可以先在外面包围div来居中，如：\n\n```markdown\n<div align=\"center\">    \n\t<img src=\"xxx\" />\n</div>\n```\n\n​\t这虽然在Typora上是认不出来，但是在本地测试部署上的网页是正常的。\n\n\n\n​\t一般比较长的图片或者正常的图片也不用再添加格式样式来改，但是对于宽的图片最好还是要缩放。以下是反例。\n\n<div align=\"center\">   \n\t<img src=\"/img/博客搭建/博客搭建13.jpg\" />\n</div>\n​\t下面是加上缩放，缩放长高都设为100%。具体多少视情况而定。\n\n```markdown\n<div align=\"center\">    \n\t<img src=\"xxx\" width=\"100%\" height=\"100%\"/>\n</div>\n```\n\n<div align=\"center\">   \n\t<img src=\"/img/博客搭建/博客搭建13.jpg\" width=\"100%\" height=\"100%\"/>\n</div>\n\n# 网页标题问题\n\n​\t搭建后点开文章，发现标题有个undefined\n\n![image-20230327152753641](https://s1.vika.cn/space/2023/03/27/55295d831c90413ab6a9c72ec31d9041)\n\n​\t打开`\\_config.yml`，加上\n\n```\nSEOTitle: 替换undefined的内容\n```\n\n# 网页上方座右铭\n\n![image-20230327163809685](https://s1.vika.cn/space/2023/03/27/e71e0153cffa4489b108f1c991ca5889)\n\n​\t打开`\\_config.yml`，加上\n\n```\nsubtitle: \"你的座右铭\"\n```\n\n# 2023.5.15更新用维格作为图床403Forbidden问题\n\n前几天上博客看了下，图片都是403Forbidden，估计是维格那边的政策变了。于是找了解决方法。\n\n打开`\\themes\\hexo-theme-aircloud\\layout\\_partial\\head.ejs`，在几行meta之间加上\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n![image-20230515160307762](https://s1.vika.cn/space/2023/05/15/f63f00fb35204eda9765d2646c46e287)\n\n然后再部署就正常了","tags":["搭建"]}]